# docker-compose.yaml

services:
  traefik:
    image: traefik:v3.3
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-admin@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/traefik/letsencrypt:/letsencrypt"
    networks:
      - auction_net
    profiles:
      - vps

  # NFT Auction Core Service
  auction-manager:
    build:
      context: ./apps/auction-manager
      dockerfile: ${STAGE:-dev}.Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_password}@${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
      - SHAPE_L2_URL=http://shape-l2:4000
    volumes:
      - ${STAGE:-dev}.volumes.auction-manager
    ports:
      - "4100:4100"
    depends_on:
      - redis
      - shape-l2
    networks:
      - auction_net
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.5}
          memory: ${RESOURCES_MEMORY:-512M}
    command: ${STAGE:-dev}.command.auction-manager

  # Event Orchestration Service
  event-handler:
    build:
      context: ./apps/event-handler
      dockerfile: ${STAGE:-dev}.Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:6379
    ports:
      - "4300:4300"
    networks:
      - auction_net
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.5}
          memory: ${RESOURCES_MEMORY:-512M}
    command: ${STAGE:-dev}.command.event-handler

  # Stream Processing Service
  stream-manager:
    build:
      context: ./apps/stream-manager
      dockerfile: ${STAGE:-dev}.Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:6379
    volumes:
      - ${STAGE:-dev}.volumes.stream-manager
    ports:
      - "4200:4200"
    networks:
      - auction_net
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.5}
          memory: ${RESOURCES_MEMORY:-512M}
    command: ${STAGE:-dev}.command.stream-manager

  # Shape L2 Integration Service
  shape-l2:
    build:
      context: ./apps/shape-l2
      dockerfile: ${STAGE:-dev}.Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - USE_MOCK_BLOCKCHAIN=${USE_MOCK_BLOCKCHAIN:-true}
      - SOL_RPC_URL=${SOL_RPC_URL}
      - SHAPE_L2_NETWORK=${SHAPE_L2_NETWORK:-testnet}
      - SHAPE_L2_CONTRACT=${SHAPE_L2_CONTRACT}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    volumes:
      - ${STAGE:-dev}.volumes.shape-l2
    ports:
      - "4000:4000"
    networks:
      - auction_net
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.75}
          memory: ${RESOURCES_MEMORY:-1G}
    command: ${STAGE:-dev}.command.shape-l2

  # ElizaOS VTuber Service
  eliza:
    build:
      context: ./apps/eliza
      dockerfile: ${STAGE:-dev}.Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - USE_MOCK_APIS=${USE_MOCK_APIS:-true}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_password}@${REDIS_HOST:-redis}:${REDIS_PORT:-6379}
      - DISCORD_APPLICATION_ID=${DISCORD_APPLICATION_ID}
      - DISCORD_API_TOKEN=${DISCORD_API_TOKEN}
      - ELEVENLABS_XI_API_KEY=${ELEVENLABS_XI_API_KEY}
      - TEE_MODE=${TEE_MODE:-development}
      - LOG_LEVEL=${LOG_LEVEL:-debug}
    volumes:
      - ${STAGE:-dev}.volumes.eliza
    ports:
      - "4400:4400"
    networks:
      - auction_net
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-1.0}
          memory: ${RESOURCES_MEMORY:-2G}
    command: ${STAGE:-dev}.command.eliza

  # Admin Frontend Service
  admin-frontend:
    build:
      context: ./apps/admin
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
      - DOCKER_SOCKET=/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "3000:3000"
    networks:
      - auction_net
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.5}
          memory: ${RESOURCES_MEMORY:-512M}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls.certresolver=letsencrypt"

  # Redis for Caching and Message Queue
  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-default_password} --protected-mode no
    volumes:
      - ./data/redis:/data:rw
    ports:
      - "6379:6379"
    networks:
      - auction_net
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-default_password}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus:rw
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - auction_net
    profiles:
      - monitoring

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SERVER_ROOT_URL=https://${MONITORING_DOMAIN:-localhost}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./data/grafana:/var/lib/grafana:rw
    ports:
      - "3001:3000"
    networks:
      - auction_net
    profiles:
      - monitoring

  # Node Exporter for Host Metrics
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - auction_net

  adminer:
    image: adminer
    ports:
      - "6380:8080"
    networks:
      - auction_net
    profiles:
      - dev

x-volumes:
  dev.volumes.auction-manager: &dev-volumes
    - ./apps/auction-manager/src:/app/src:ro
    - ./apps/auction-manager/package.json:/app/package.json:ro
    - ./data/auction:/app/storage:rw
  
  prod.volumes.auction-manager:
    - ./data/auction:/app/storage:rw

  dev.volumes.stream-manager:
    - ./apps/stream-manager/src:/app/src:ro
    - ./apps/stream-manager/package.json:/app/package.json:ro
    - ./data/stream:/app/storage:rw

  prod.volumes.stream-manager:
    - ./data/stream:/app/storage:rw

  dev.volumes.shape-l2:
    - ./apps/shape-l2/src:/app/src:ro
    - ./apps/shape-l2/package.json:/app/package.json:ro
    - ./data/shape-l2:/app/storage:rw

  prod.volumes.shape-l2:
    - ./data/shape-l2:/app/storage:rw

  dev.volumes.eliza:
    - ./apps/eliza/src:/app/src:ro
    - ./apps/eliza/package.json:/app/package.json:ro
    - ./data/eliza:/app/storage:rw

  prod.volumes.eliza:
    - ./data/eliza:/app/storage:rw

  dev.volumes.admin-frontend:
    - ./apps/admin/src:/app/src:ro
    - ./apps/admin/public:/app/public:ro
    - ./apps/admin/.next:/app/.next
    - ./apps/admin/node_modules:/app/node_modules

  prod.volumes.admin-frontend:
    - ./apps/admin/.next:/app/.next

x-commands:
  dev.command.auction-manager: &dev-command
    npm run dev
  
  prod.command.auction-manager:
    npm run start

  dev.command.event-handler: *dev-command
  prod.command.event-handler:
    npm run start

  dev.command.stream-manager: *dev-command
  prod.command.stream-manager:
    npm run start

  dev.command.shape-l2: *dev-command
  prod.command.shape-l2:
    npm run start

  dev.command.eliza: *dev-command
  prod.command.eliza:
    npm run start

networks:
  auction_net:
    driver: ${NETWORK_DRIVER:-bridge}