---
description: 
globs: 
alwaysApply: true
---
# Shared Package Structure and Import Standards

This document outlines the recommended structure for the SothebAIs shared packages and how to properly import from them.

## Current Structure

The shared package is now organized as a single cohesive package at the root level:

```
packages/
├── dist/          # Built output
├── src/           # Source code
│   ├── types/     # Type definitions
│   ├── schema/    # Database schemas and models
│   ├── utils/     # Utility functions
│   └── index.ts   # Main entry point that re-exports everything
├── package.json   # Single package definition
└── tsconfig.json  # Single tsconfig
```

## Benefits of This Approach

- **Simplified Imports**: One consistent import pattern across the codebase.
- **Easier Builds**: Single build process for the entire shared package.
- **Clearer Dependencies**: Better visibility of dependencies without nested workspaces.
- **Reduced Configuration**: Single tsconfig.json file to maintain.
- **Clear Separation**: Distinguishes between deployable services (in apps/) and shared code (in packages/).

## Implementation Details

1. **Package Structure**:
   - All shared code lives in `packages/src/`.
   - Organized into subdirectories by type/purpose: `types/`, `schema/`, and `utils/`.
   - Main `index.ts` re-exports everything needed.

2. **Package Configuration**:
```json
{
  "name": "@sothebais/packages",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "tsc -p tsconfig.json",
    "clean": "rm -rf dist",
    "lint": "eslint ."
  }
}
```

3. **tsconfig.json**:
```json
{
  "extends": "../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src",
    "composite": true,
    "baseUrl": "..",
    "paths": {
      "@sothebais/packages/*": ["packages/src/*"]
    }
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}
```

## Import Standards

### Consistent Import Patterns

Always use the following pattern for imports from the shared packages:

```typescript
// Correct
import { createLogger } from '@sothebais/packages/utils/logger.js';
import type { StreamState } from '@sothebais/packages/types/stream.js';
```

### Path Aliases in Service Packages

For each service package that needs to use the shared packages, add the following to its tsconfig.json:

```json
{
  "compilerOptions": {
    "paths": {
      "@sothebais/packages/*": ["../../packages/src/*"]
    }
  }
}
```

### ESM Imports

Always include the `.js` extension in import paths, even for TypeScript files:

```typescript
// Correct
import { createLogger } from '@sothebais/packages/utils/logger.js';

// Incorrect
import { createLogger } from '@sothebais/packages/utils/logger';
```

## Local Development

To ensure proper local development:

1. **Build the packages first**:
```bash
cd packages
npm run build
```

2. **Use package references in tsconfig**:
Add this to each service's tsconfig.json:
```json
{
  "references": [
    { "path": "../../packages" }
  ]
}
```

3. **Use npm workspaces for installation**:
```bash
npm install
```

## Docker & Container Setup

For Docker containers to access the shared packages:

1. **Mount the packages directory**:
```yaml
volumes:
  - ./packages/src:/app/packages/src:ro  # Mount packages source code
  - ./packages/package.json:/app/packages/package.json:ro  # Mount packages package.json
  - ./packages/tsconfig.json:/app/packages/tsconfig.json:ro  # Mount packages tsconfig.json
```

2. **Ensure tsconfig paths are correct** in the Docker container.

## Troubleshooting Common Issues

### Module Not Found Errors

If you see "Cannot find module '@sothebais/packages/...'" errors:

1. Ensure the packages directory is built.
2. Check that your tsconfig.json has the correct paths alias.
3. Verify you're using the `.js` extension in your imports.

### Type Issues

If TypeScript can't find types from the shared packages:

1. Make sure to explicitly import the types: `import type { ... } from '@sothebais/packages/types/...';`
2. Check that the shared package's build is up to date.