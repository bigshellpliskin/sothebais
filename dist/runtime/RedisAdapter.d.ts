import { RedisClientType } from 'redis';
import { IDatabaseAdapter, IMemoryManager, ICacheManager, IRAGKnowledgeManager, Memory } from '@elizaos/core';
type UUID = `${string}-${string}-${string}-${string}-${string}`;
export declare class RedisAdapter implements IDatabaseAdapter, IMemoryManager, ICacheManager, IRAGKnowledgeManager {
    private redis;
    constructor(redis: RedisClientType<any>);
    db: any;
    init(): Promise<void>;
    close(): Promise<void>;
    getAccountById(): Promise<any>;
    createAccount(): Promise<any>;
    getMemoryById(): Promise<any>;
    log(): Promise<void>;
    getActorDetails(): Promise<any>;
    updateGoalStatus(): Promise<void>;
    removeMemory(): Promise<void>;
    getGoals(): Promise<any[]>;
    updateGoal(): Promise<void>;
    createGoal(): Promise<void>;
    removeGoal(): Promise<void>;
    removeAllGoals(): Promise<void>;
    getRoom(): Promise<any>;
    createRoom(roomId?: UUID): Promise<UUID>;
    removeRoom(): Promise<void>;
    updateRoom(): Promise<void>;
    getRooms(): Promise<any[]>;
    searchRooms(): Promise<any[]>;
    getParticipant(): Promise<any>;
    createParticipant(): Promise<void>;
    removeParticipant(userId: UUID, roomId: UUID): Promise<boolean>;
    updateParticipant(): Promise<void>;
    getParticipants(): Promise<any[]>;
    searchParticipants(): Promise<any[]>;
    getRoomsForParticipant(): Promise<any[]>;
    getRoomsForParticipants(): Promise<any[]>;
    addParticipant(userId: UUID, roomId: UUID): Promise<boolean>;
    getParticipantsForAccount(): Promise<any[]>;
    getParticipantsForRoom(): Promise<any[]>;
    getParticipantsForRooms(): Promise<any[]>;
    getParticipantUserState(): Promise<any>;
    setParticipantUserState(): Promise<void>;
    createRelationship(params: {
        userA: UUID;
        userB: UUID;
    }): Promise<boolean>;
    getRelationship(): Promise<any>;
    getRelationships(): Promise<any[]>;
    runtime: any;
    tableName: string;
    createMemory(memory: Memory): Promise<void>;
    getMemory(id: string): Promise<Memory | null>;
    getMemories(): Promise<Memory[]>;
    deleteMemory(id: string): Promise<void>;
    addEmbeddingToMemory(memory: Memory): Promise<Memory>;
    searchMemories(): Promise<Memory[]>;
    updateMemory(memory: Memory): Promise<void>;
    deleteMemories(): Promise<void>;
    getMemoriesByUserId(): Promise<Memory[]>;
    getMemoriesByRoomId(): Promise<Memory[]>;
    getCachedEmbeddings(): Promise<any[]>;
    getMemoriesByRoomIds(): Promise<Memory[]>;
    searchMemoriesByEmbedding(): Promise<Memory[]>;
    removeAllMemories(): Promise<void>;
    countMemories(): Promise<number>;
    get(key: string): Promise<any>;
    set(key: string, value: any): Promise<void>;
    delete(key: string): Promise<void>;
    getKnowledge(): Promise<any>;
    createKnowledge(): Promise<void>;
    removeKnowledge(): Promise<void>;
    searchKnowledge(): Promise<any[]>;
    updateKnowledge(): Promise<void>;
    listKnowledge(): Promise<any[]>;
    clearKnowledge(): Promise<void>;
    processFile(): Promise<void>;
}
export {};
