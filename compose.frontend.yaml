# docker-compose.frontend.yaml

services:
  traefik:
    image: traefik:v3.3
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--api.dashboard=true"
      - "--ping=true"
      - "--ping.entrypoint=traefik"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:3100"
      # Allow ACME challenge before redirect
      - "--entrypoints.web.http.middlewares=redirect-to-https@file"
      # Certificate Resolver configuration
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # Metrics
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "3100:3100" # Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "letsencrypt:/letsencrypt"
      - "./traefik:/etc/traefik"
    networks:
      - auction_net
    environment:
      - "ACME_EMAIL=${ACME_EMAIL}"
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-default_password}
    ports:
      - "6379:6379"
    networks:
      - auction_net
    volumes:
      - redis_data:/data
    restart: unless-stopped

  auction-manager:
    build:
      context: ./apps/auction-manager
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    environment:
      - NODE_ENV=development
      - PORT=4100
      - METRICS_PORT=4190
      - HEALTH_PORT=4191
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-default_password}
    volumes:
      - ./apps/auction-manager:/app
      - /app/node_modules
    networks:
      - auction_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auction-manager.rule=Host(`${AUCTION_MANAGER_SUBDOMAIN}`)"
      - "traefik.http.services.auction-manager.loadbalancer.server.port=4100"
      - "traefik.http.routers.auction-manager.entrypoints=websecure"
      - "traefik.http.routers.auction-manager.tls.certresolver=letsencrypt"
    ports:
      - "4100:4100" # Main API
      - "4190:4190" # Metrics
      - "4191:4191" # Health
    depends_on:
      - redis
    command: npm run dev

  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    networks:
      - auction_net
    depends_on:
      - redis
    command: --redis.addr=redis://redis:6379 --redis.password=${REDIS_PASSWORD:-default_password}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-metrics.rule=Host(`${MONITORING_SUBDOMAIN}`) && PathPrefix(`/redis-metrics`)"
      - "traefik.http.services.redis-metrics.loadbalancer.server.port=9121"
      - "traefik.http.routers.redis-metrics.entrypoints=websecure"
      - "traefik.http.routers.redis-metrics.tls.certresolver=letsencrypt"
      - "traefik.http.routers.redis-metrics.middlewares=redis-metrics-strip"
      - "traefik.http.middlewares.redis-metrics-strip.stripprefix.prefixes=/redis-metrics"

  prometheus:
    image: prom/prometheus:v2.48.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
      - "--web.external-url=https://${MONITORING_SUBDOMAIN}/prometheus"
      - "--web.route-prefix=/prometheus"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - auction_net
    ports:
      - "9090:9090"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${MONITORING_SUBDOMAIN}`) && PathPrefix(`/prometheus`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"

  grafana:
    image: grafana/grafana:10.2.2
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=https://${MONITORING_SUBDOMAIN}
      - GF_SERVER_HTTP_PORT=9000
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_DATASOURCES_DATASOURCES_YML_REMOVE_EXISTING=true
      # Configure Prometheus datasource
      - GF_DATASOURCES_DATASOURCES_0_NAME=Prometheus
      - GF_DATASOURCES_DATASOURCES_0_TYPE=prometheus
      - GF_DATASOURCES_DATASOURCES_0_URL=http://prometheus:9090/prometheus
      - GF_DATASOURCES_DATASOURCES_0_ACCESS=proxy
      - GF_DATASOURCES_DATASOURCES_0_IS_DEFAULT=true
    ports:
      - "9000:9000"
    networks:
      - auction_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${MONITORING_SUBDOMAIN}`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=9000"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
    depends_on:
      - prometheus

  admin-frontend:
    build:
      context: ./apps/admin
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=development
      - GRAFANA_URL=http://grafana:9000
      - PROMETHEUS_URL=http://prometheus:9090
    volumes:
      - ./apps/admin:/app
      - /app/node_modules
    ports:
      - "3000:3000"
      - "3090:3090"
    networks:
      - auction_net

  event-handler:
    build:
      context: ./apps/event-handler
      dockerfile: Dockerfile
      target: ${NODE_ENV:-development}
    environment:
      - NODE_ENV=development
      - PORT=4300
      - EVENT_STREAM_PORT=4301
      - METRICS_PORT=4390
      - HEALTH_PORT=4391
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:6379
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./apps/event-handler:/app
      - /app/node_modules
    networks:
      - auction_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.event-handler.rule=Host(`${EVENT_HANDLER_SUBDOMAIN}`)"
      - "traefik.http.services.event-handler.loadbalancer.server.port=4300"
      - "traefik.http.routers.event-handler.entrypoints=websecure"
      - "traefik.http.routers.event-handler.tls.certresolver=letsencrypt"
      # Event stream endpoint
      - "traefik.http.routers.event-stream.rule=Host(`${EVENT_HANDLER_SUBDOMAIN}`) && PathPrefix(`/events`)"
      - "traefik.http.services.event-stream.loadbalancer.server.port=4301"
      - "traefik.http.routers.event-stream.entrypoints=websecure"
      - "traefik.http.routers.event-stream.tls.certresolver=letsencrypt"
    ports:
      - "4300:4300" # Main API
      - "4301:4301" # Event Stream
      - "4390:4390" # Metrics
      - "4391:4391" # Health
    depends_on:
      - redis

volumes:
  letsencrypt:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  auction_net:
    external: true 