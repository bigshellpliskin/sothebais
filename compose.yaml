# compose.yaml

services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      # - "--entrypoints.metrics.address=:3100"  # Commented out metrics for now
      # Enable WebSocket support globally
      - "--ping=true"
      - "--accesslog=true"
      - "--accesslog.fields.headers.names.X-Forwarded-For=keep"
      - "--accesslog.fields.headers.names.X-Forwarded-Proto=keep"
      - "--accesslog.fields.headers.names.X-Forwarded-Host=keep"
      - "--accesslog.fields.headers.names.Upgrade=keep"
      - "--accesslog.fields.headers.names.Connection=keep"
      # Debug logging
      - "--log.level=DEBUG"
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:${TRAEFIK_HTTP_PORT:-80}"        # HTTP/WebSocket
      - "${TRAEFIK_HTTPS_PORT:-443}:${TRAEFIK_HTTPS_PORT:-443}"    # HTTPS
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:${TRAEFIK_DASHBOARD_PORT:-8080}" # Dashboard
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./data/traefik/letsencrypt:/letsencrypt"
    networks:
      - auction_net
    environment:
      - "ACME_EMAIL=${ACME_EMAIL}"
    labels:
      - "traefik.enable=true"
      # Health check endpoint
      - "traefik.http.routers.traefik-health.rule=PathPrefix(`/ping`)"
      - "traefik.http.routers.traefik-health.service=ping@internal"
      - "traefik.http.routers.traefik-health.entrypoints=web"
    healthcheck:
      test: 
        - "CMD"
        - "/bin/sh"
        - "-c"
        - "[ -w /letsencrypt/acme.json ]"
      interval: 10s
      timeout: 5s
      retries: 3

  admin-frontend:
    build:
      context: .
      dockerfile: ./apps/admin/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
      - NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
      - DOCKER_SOCKET=/var/run/docker.sock
      - PORT=${ADMIN_PORT:-3000}
      - METRICS_PORT=${ADMIN_METRICS_PORT:-3090}
      - HEALTH_PORT=${ADMIN_HEALTH_PORT:-3091}
      - PROMETHEUS_URL=http://prometheus:${PROMETHEUS_PORT:-9090}
      - STREAM_MANAGER_URL=http://stream-manager:${STREAM_MANAGER_PORT:-4200}
      - NEXT_PUBLIC_WS_URL=ws://${DOMAIN}/ws  # Use non-TLS WebSocket URL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./.env:/app/.env:ro
      - ./apps/admin/src:/app/src:ro
      - ./apps/admin/public:/app/public:ro
      - ./apps/admin/.next:/app/.next
      - ./apps/admin/node_modules:/app/node_modules
    networks:
      - auction_net
    ports:
      - "${ADMIN_PORT:-3000}:${ADMIN_PORT:-3000}"
    labels:
      - "traefik.enable=true"
      # HTTP routing
      - "traefik.http.routers.admin.rule=Host(`${DOMAIN}`) && PathPrefix(`/`)"
      - "traefik.http.services.admin.loadbalancer.server.port=${ADMIN_PORT:-3000}"
      - "traefik.http.routers.admin.entrypoints=web"
      - "traefik.http.routers.admin.priority=1"  # Lowest priority (catch-all)
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - stream-manager

  # Stream Processing Service
  stream-manager:
    build:
      context: .
      dockerfile: ./apps/stream-manager/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:${REDIS_PORT:-6379}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-default_password}
      - PORT=${STREAM_MANAGER_PORT:-4200}
      - WS_PORT=${STREAM_MANAGER_WS_PORT:-4201}
      - METRICS_PORT=${STREAM_MANAGER_METRICS_PORT:-4290}
      - RTMP_PORT=${STREAM_MANAGER_RTMP_PORT:-1935}
      - LOG_LEVEL=debug
      - LOG_PRETTY_PRINT=true
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    ports:
      - "${STREAM_MANAGER_PORT:-4200}:${STREAM_MANAGER_PORT:-4200}"
      - "${STREAM_MANAGER_WS_PORT:-4201}:${STREAM_MANAGER_WS_PORT:-4201}"
      - "${STREAM_MANAGER_RTMP_PORT:-1935}:${STREAM_MANAGER_RTMP_PORT:-1935}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./apps/stream-manager/src:/app/src:ro
      - ./apps/stream-manager/package.json:/app/package.json:ro
      - ./data/stream-manager:/app/storage:rw
      - ./apps/stream-manager/assets:/app/assets:ro  # Mount assets directory
    networks:
      - auction_net
    labels:
      - "traefik.enable=true"
      # HTTP API
      - "traefik.http.routers.stream-api.rule=Host(`${DOMAIN}`) && PathPrefix(`/stream`)"
      - "traefik.http.routers.stream-api.entrypoints=web"
      - "traefik.http.services.stream-api.loadbalancer.server.port=${STREAM_MANAGER_PORT:-4200}"
      
      # WebSocket Configuration
      - "traefik.http.routers.stream-ws.rule=PathPrefix(`/ws`)"
      - "traefik.http.routers.stream-ws.entrypoints=web"
      - "traefik.http.routers.stream-ws.service=stream-ws"
      - "traefik.http.services.stream-ws.loadbalancer.server.port=${STREAM_MANAGER_WS_PORT:-4201}"
      
      # WebSocket Middleware
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Connection=Upgrade"
      - "traefik.http.middlewares.ws-headers.headers.customrequestheaders.Upgrade=websocket"
      - "traefik.http.middlewares.ws-headers.headers.customresponseheaders.Connection=Upgrade"
      - "traefik.http.middlewares.ws-headers.headers.customresponseheaders.Upgrade=websocket"
      - "traefik.http.middlewares.ws-headers.headers.allowedHeaders=Sec-WebSocket-Extensions,Sec-WebSocket-Key,Sec-WebSocket-Version"
      - "traefik.http.routers.stream-ws.middlewares=ws-headers"
      
      # Priority
      - "traefik.http.routers.stream-ws.priority=200"
    command: npm run debug:stream
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:4200/stream/status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - redis
      - traefik

  # Redis for Caching and Message Queue
  redis:
    image: redis:7-alpine
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD:-default_password}
      --protected-mode yes
      --bind 0.0.0.0
      --tcp-backlog 511
      --maxclients 10000
      --timeout 0
      --tcp-keepalive 300
    volumes:
      - redis_data:/data
    expose:
      - "${REDIS_PORT:-6379}"
    networks:
      - auction_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-default_password}", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  event-handler:
    build:
      context: .
      dockerfile: ./apps/event-handler/Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:6379
      - PORT=${EVENT_HANDLER_PORT:-4300}
      - EVENT_STREAM_PORT=${EVENT_HANDLER_STREAM_PORT:-4301}
      - METRICS_PORT=${EVENT_HANDLER_METRICS_PORT:-4390}
      - HEALTH_PORT=${EVENT_HANDLER_HEALTH_PORT:-4391}
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./apps/event-handler/src:/app/src:ro
      - ./apps/event-handler/package.json:/app/package.json:ro
      - ./data/event-handler:/app/storage:rw
    # In development, expose ports directly
    ports:
      - "${EVENT_HANDLER_PORT:-4300}:${EVENT_HANDLER_PORT:-4300}" # Main API
      - "${EVENT_HANDLER_STREAM_PORT:-4301}:${EVENT_HANDLER_STREAM_PORT:-4301}" # Event Stream
      - "${EVENT_HANDLER_METRICS_PORT:-4390}:${EVENT_HANDLER_METRICS_PORT:-4390}" # Metrics
      - "${EVENT_HANDLER_HEALTH_PORT:-4391}:${EVENT_HANDLER_HEALTH_PORT:-4391}" # Health
    networks:
      - auction_net
    labels:
      - "traefik.enable=true"
      # Main API endpoints including logs (only active in production)
      - "traefik.http.routers.event-handler.rule=Host(`${ADMIN_SUBDOMAIN}`) && PathPrefix(`/events`)"
      - "traefik.http.routers.event-handler.entrypoints=websecure"
      - "traefik.http.routers.event-handler.tls.certresolver=letsencrypt"
      - "traefik.http.services.event-handler.loadbalancer.server.port=${EVENT_HANDLER_PORT:-4300}"
      # Metrics endpoint
      - "traefik.http.routers.event-handler-metrics.rule=Host(`${ADMIN_SUBDOMAIN}`) && PathPrefix(`/metrics/events`)"
      - "traefik.http.routers.event-handler-metrics.entrypoints=websecure"
      - "traefik.http.services.event-handler-metrics.loadbalancer.server.port=${EVENT_HANDLER_METRICS_PORT:-4390}"
      # Health check endpoint
      - "traefik.http.routers.event-handler-health.rule=Host(`${ADMIN_SUBDOMAIN}`) && PathPrefix(`/health/events`)"
      - "traefik.http.routers.event-handler-health.entrypoints=websecure"
      - "traefik.http.services.event-handler-health.loadbalancer.server.port=${EVENT_HANDLER_HEALTH_PORT:-4391}"
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.5}
          memory: ${RESOURCES_MEMORY:-512M}
    command: npm run start
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4391/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Auction Engine Service
  auction-engine:
    build:
      context: .
      dockerfile: ./apps/auction-engine/Dockerfile
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:${REDIS_PORT:-6379}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-default_password}
      - PORT=${AUCTION_ENGINE_PORT:-4400}
      - METRICS_PORT=${AUCTION_ENGINE_METRICS_PORT:-4490}
      - HEALTH_PORT=${AUCTION_ENGINE_HEALTH_PORT:-4491}
      - LOG_LEVEL=debug
      - LOG_PRETTY_PRINT=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./data/auction:/app/storage:rw
    ports:
      - "${AUCTION_ENGINE_PORT:-4400}:${AUCTION_ENGINE_PORT:-4400}"
      - "${AUCTION_ENGINE_METRICS_PORT:-4490}:${AUCTION_ENGINE_METRICS_PORT:-4490}"
      - "${AUCTION_ENGINE_HEALTH_PORT:-4491}:${AUCTION_ENGINE_HEALTH_PORT:-4491}"
    networks:
      - auction_net
    command: npm run start
    labels:
      - "traefik.enable=true"
      # Main API endpoints
      - "traefik.http.routers.auction-engine.rule=Host(`${DOMAIN}`) && PathPrefix(`/auction`)"
      - "traefik.http.routers.auction-engine.entrypoints=web"
      - "traefik.http.services.auction-engine.loadbalancer.server.port=${AUCTION_ENGINE_PORT:-4400}"
      # Metrics endpoint
      - "traefik.http.routers.auction-engine-metrics.rule=Host(`${ADMIN_SUBDOMAIN}`) && PathPrefix(`/metrics/auction`)"
      - "traefik.http.routers.auction-engine-metrics.entrypoints=websecure"
      - "traefik.http.services.auction-engine-metrics.loadbalancer.server.port=${AUCTION_ENGINE_METRICS_PORT:-4490}"
      # Health check endpoint
      - "traefik.http.routers.auction-engine-health.rule=Host(`${ADMIN_SUBDOMAIN}`) && PathPrefix(`/health/auction`)"
      - "traefik.http.routers.auction-engine-health.entrypoints=websecure"
      - "traefik.http.services.auction-engine-health.loadbalancer.server.port=${AUCTION_ENGINE_HEALTH_PORT:-4491}"
    deploy:
      resources:
        limits:
          cpus: ${RESOURCES_CPU:-0.5}
          memory: ${RESOURCES_MEMORY:-512M}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4491/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis
      - traefik

  # Eliza Agent Service
  # eliza:
  #   build:
  #     context: .
  #     dockerfile: ./apps/eliza/Dockerfile
  #   environment:
  #     - NODE_ENV=${NODE_ENV:-development}
  #     - REDIS_URL=redis://:${REDIS_PASSWORD:-default_password}@redis:${REDIS_PORT:-6379}
  #     - REDIS_HOST=redis
  #     - REDIS_PORT=${REDIS_PORT:-6379}
  #     - REDIS_PASSWORD=${REDIS_PASSWORD:-default_password}
  #     - PORT=${ELIZA_PORT:-4500}
  #     - WS_PORT=${ELIZA_WS_PORT:-4501}
  #     - METRICS_PORT=${ELIZA_METRICS_PORT:-4590}
  #     - HEALTH_PORT=${ELIZA_HEALTH_PORT:-4591}
  #     - AUCTION_ENGINE_URL=http://auction-engine:${AUCTION_ENGINE_PORT:-4400}
  #     - STREAM_MANAGER_URL=http://stream-manager:${STREAM_MANAGER_PORT:-4200}
  #     - LOG_LEVEL=debug
  #     - LOG_PRETTY_PRINT=true
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./apps/eliza/src:/app/src:ro
  #     - ./apps/eliza/package.json:/app/package.json:ro
  #     - ./data/eliza:/app/storage:rw
  #   ports:
  #     - "${ELIZA_PORT:-4500}:${ELIZA_PORT:-4500}"
  #     - "${ELIZA_WS_PORT:-4501}:${ELIZA_WS_PORT:-4501}"
  #     - "${ELIZA_METRICS_PORT:-4590}:${ELIZA_METRICS_PORT:-4590}"
  #     - "${ELIZA_HEALTH_PORT:-4591}:${ELIZA_HEALTH_PORT:-4591}"
  #   networks:
  #     - auction_net
  #   labels:
  #     - "traefik.enable=true"
  #     # Main API endpoints
  #     - "traefik.http.routers.eliza.rule=Host(`${DOMAIN}`) && PathPrefix(`/agent`)"
  #     - "traefik.http.routers.eliza.entrypoints=web"
  #     - "traefik.http.services.eliza.loadbalancer.server.port=${ELIZA_PORT:-4500}"
  #     # WebSocket Configuration
  #     - "traefik.http.routers.eliza-ws.rule=PathPrefix(`/agent/ws`)"
  #     - "traefik.http.routers.eliza-ws.entrypoints=web"
  #     - "traefik.http.routers.eliza-ws.service=eliza-ws"
  #     - "traefik.http.services.eliza-ws.loadbalancer.server.port=${ELIZA_WS_PORT:-4501}"
  #     - "traefik.http.routers.eliza-ws.middlewares=ws-headers"
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: ${RESOURCES_CPU:-0.5}
  #         memory: ${RESOURCES_MEMORY:-512M}
  #   command: npm run start
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:4591/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   depends_on:
  #     - redis
  #     - auction-engine
  #     - stream-manager

x-volumes:
  dev.volumes.stream-manager:
    - type: bind
      source: ./.env
      target: /app/.env
      read_only: true
    - type: bind
      source: ./apps/stream-manager/src
      target: /app/src
      read_only: true
    - type: bind
      source: ./apps/stream-manager/package.json
      target: /app/package.json
      read_only: true
    - type: bind
      source: ./apps/stream-manager/assets
      target: /app/assets
      read_only: true
    - type: volume
      source: stream_storage
      target: /app/storage

  prod.volumes.stream-manager:
    - type: volume
      source: stream_storage
      target: /app/storage

  dev.volumes.admin-frontend:
    - ./apps/admin/src:/app/src:ro
    - ./apps/admin/public:/app/public:ro
    - ./apps/admin/.next:/app/.next
    - ./apps/admin/node_modules:/app/node_modules

  prod.volumes.admin-frontend:
    - ./apps/admin/.next:/app/.next

  dev.volumes.event-handler:
    - ./apps/event-handler/src:/app/src:ro
    - ./apps/event-handler/package.json:/app/package.json:ro
    - ./data/event-handler:/app/storage:rw

  prod.volumes.event-handler:
    - ./data/event-handler:/app/storage:rw

x-commands:
  dev.command.event-handler:
    npm run dev
  
  prod.command.event-handler:
    npm run start

volumes:
  redis_data:
  stream_storage:

networks:
  auction_net:
    driver: ${NETWORK_DRIVER:-bridge}